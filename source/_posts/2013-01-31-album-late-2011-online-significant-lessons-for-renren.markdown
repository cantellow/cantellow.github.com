---
layout: post
title: "photo 2011年末 线上重大经验教训"
date: 2013-01-31 17:07
comments: true
categories: Java
---
这是一封内部邮件。

新年伊始，去年的3个月相信对各位都是一段非常难忘的岁月，回过头来一想，以前遇到的各种苦难和困难根本不算什么，咬咬牙就过去了，从另一方面说困难和问题对我们是一件宝贵的财富，特别是一些线上重大问题，为此我整理了一些，目的是学习更多的东西避免下次犯同样的错误。<!-- more -->
<h3>1、新机器的配置不全</h3>
比如数据库连接的权限，以前旋转在java端的时候还需要安装Jmagick
<h3>2、国庆期间晚上高峰期resin频繁ping超时导致不定时重启</h3>
upload的旋转功能访问静态文件走的是外网，龟速的下载速度导致大量的用户TCP连接得不到释放，进而导致高峰期超过最大连接数限制，resin自带的ping失败，然后重启。
解决问题一般要从问题表现的现象入手，一步一步的找到根本原因。
<h3>3、其他服务超时导致相册服务器内存巨高甚至崩溃</h3>
这种现象发生过至少3次了，ICE超时那次表现最典型，我们的photo内存一直占据着95%左右，有时swap都还吃紧，查看堆信息和gc信息都很正常，毫无疑问是direct memory泄漏，猜测是socket连接开辟的DirectByteBuffer因为其他服务超时得不到释放。
<h3>4、为客户端提供的上传接口改了返回值导致客户端大批上传失败</h3>
原因是由于我们没有认清客户端的产品特性造成的，客户端一旦发布就很难收回，对他们提供的接口也需要考虑兼容各种版本，涉及客户端的接口改动需要谨慎再谨慎。 
<h3>5、其他服务接口调用方法错误，导致内存溢出</h3>
ajax获取评论时错误：java.lang.OutOfMemoryError:unable to create new native thread，根本原因是我们在调用其他服务接口时没有进行任何封装直接调用，而这个接口每次请求时都会新建一个线程且不会消亡，最后导致把内存消耗完毕，没有线程可建从而抛出上述错误。<br>堆内存（Xmx）+ 方法区内存（MaxPermSize）+ 栈内存（Xss,包括虚拟机栈和本地方法栈）*线程数 + NIO direct memory + socket缓存区（receive37KB，send25KB）+ JNI代码 + 虚拟机和GC本身 = java的内存，在物理内存和操作系统内存一定的情况下，创建的线程数目是有限制的。
<h3>6、upload和photo的mem cache model不一致，导致内存巨高甚至崩溃</h3>
Mem cache的model不一样，导致调用java序列化还原对象时抛出异常，与mem机器连接开辟的DirectByteBuffer得不到释放，从而导致内存居高不下。 
<h3>7、排序一个非常隐藏的bug把数据库给搞死了</h3>
在调用dao方法的时候，java会反射调用model的get和set方法，这个bug就是忽略了这一点导致的。
<h3>8、虚拟机参数导致upload更新时启动失败，间接导致3g几个小时内上传照片全部失败</h3>
原因是虚拟机设置的栈太小（128K），导致loadclass线程溢出（这种线程一般“战线”拉的都很长），启动过程中抛出一大堆NoClassNotFound异常，改为-Xss256k就没有问题了。 
<h3>9、spring的BeanFactoryUtils.beanOfTypeIncludingAncestors方法导致CPU巨高</h3>
beanOfTypeIncludingAncestors这个方法消耗太多的内存，导致一次普通的请求消耗上100M内存，频繁的GC导致CPU居高不下 
<h3>总结，我碰到过好几次内存巨高的情况，CPU巨高我只碰到过一次，分别说明一下：</h3>
1、内存巨高，首先看java堆内存回收是否正常、GC信息是否正常、有没有抛出OOM异常，如果没有基本上就可以确定是java NIO direct memory泄漏，造成DM泄漏主要是通过网络调用其他服务造成的，可以查看一下网络连接情况、socket连接数，记得前往不要忘了查看业务后台信息，一般内存很高的话，后台都有一堆超时异常。<br>
2、CPU巨高，在没有开销很大的算法情况下，首先考虑到的是GC信息，看看GC的速度是不是比平时快了很多，锁定几个访问量比较大的URL，找一台测试机，频繁刷新这个url，看看gc情况，最后确定唯一的url，利用java自带的MemoryUsage监控内存情况，进而确定问题根本原因。<br> 
写代码是一件很容易的事情，写好代码就不容易了，写好代码并且让服务跑的很“欢乐”就更不容易了，新的一年，希望我们最大限度“压榨”服务器性能，希望相册服务跑得更加完美。
