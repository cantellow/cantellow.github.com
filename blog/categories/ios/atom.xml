<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | cantellow's blog]]></title>
  <link href="http://cantellow.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://cantellow.github.com/"/>
  <updated>2013-03-11T19:37:07+08:00</updated>
  <id>http://cantellow.github.com/</id>
  <author>
    <name><![CDATA[cantellow]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql5.5+ 支持emoji表情]]></title>
    <link href="http://cantellow.github.com/blog/2013/03/11/mysql5-dot-5-support-emoji-expressions/"/>
    <updated>2013-03-11T18:58:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/03/11/mysql5-dot-5-support-emoji-expressions</id>
    <content type="html"><![CDATA[<p>将iPhone上的数据上传服务器并存入mysql，遇到emoji表情的时候就出现下面的异常：<!-- more -->
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Caused</span> <span class="nl">by:</span> <span class="n">java</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">SQLException</span><span class="o">:</span> <span class="n">Incorrect</span> <span class="n">string</span> <span class="nl">value:</span> <span class="err">&#39;\</span><span class="n">xF0</span><span class="err">\</span><span class="n">x9F</span><span class="err">\</span><span class="n">x98</span><span class="err">\</span><span class="n">x84</span><span class="err">\</span><span class="n">xF0</span><span class="err">\</span><span class="n">x9F</span><span class="o">...</span><span class="err">&#39;</span> <span class="k">for</span> <span class="n">column</span> <span class="err">&#39;</span><span class="n">name</span><span class="err">&#39;</span> <span class="n">at</span> <span class="n">row</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
查了一下资料，发现我的mysql不支持4-byte UTF8，遂按照<a target="_blank" href="http://mathiasbynens.be/notes/mysql-utf8mb4">How to support full Unicode in MySQL databases</a>此文章进行了所有的steps设置，但并没有生效，而且很多人看了此贴之后也回复表示java.sql.SQLException依旧，最后我通过查阅<a target="_blank" href="http://docs.oracle.com/cd/E17952_01/refman-5.5-en/connector-j-usagenotes-troubleshooting.html#qandaitem-23-3-15-1-15">mysql驱动的troubleshooting</a>做出以下改动最后才成功：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">jdbc:mysql:</span><span class="c1">//localhost:3306/album?useUnicode=true&amp;amp;character_set_server=utf8mb4&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
结论就是，无论何时我们都应该使用utf8mb4来代替utf8：<br><font style="font-style:italic;">Never use utf8 in MySQL — always use utf8mb4 instead. Updating your databases and code might take some time, but it’s definitely worth the effort. Why would you arbitrarily limit the set of symbols that can be used in your database? Why would you lose data every time a user enters an astral symbol as part of a comment or message or whatever it is you store in your database? There’s no reason not to strive for full Unicode support everywhere. Do the right thing, and use utf8mb4.</font></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于IOS崩溃的一些想法]]></title>
    <link href="http://cantellow.github.com/blog/2013/02/27/some-thoughts-about-the-crash-of-the-ios/"/>
    <updated>2013-02-27T10:48:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/02/27/some-thoughts-about-the-crash-of-the-ios</id>
    <content type="html"><![CDATA[<p>在Java中出现了运行时异常最多会让这个thread崩溃，但在IOS中却会让整个app崩溃，诸如[NSArray objectAtIndex:0]这种crash report在多线程环境中很难避免。有什么办法在出现了这种异常不崩溃，而且能上报异常信息，就像查看java后台异常那样？<!-- more --></p>

<h3>Category</h3>


<p>刚开始想利用Category将objectAtIndex覆盖掉，但是Category无法获得原始的objectAtIndex方法，毕竟我们只是想try catch一下，最终还是要调用原始objectAtIndex方法的。</p>

<h3>Method Swizzling</h3>


<p>Method Swizzling能利用OC的runtime环境，将方法的名字和方法的实现互相替换，这样就能获取到原始的objectAtIndex方法。参考：<a target='_blank' href="http://www.winddisk.com/2012/07/01/methodswizzling/">Method Swizzling</a></p>

<p><a target='_blank' href="http://b2cloud.com.au/how-to-guides/method-swizzling-to-override-in-a-category">Method Swizzling to override in a category</a>给出了一种方法，就是在app启动的时候执行下面代码：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">swizzle</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">NSArray</span> <span class="nl">jr_swizzleMethod:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">objectAtIndex:</span><span class="p">)</span> <span class="nl">withMethod:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">objectAtIndex_swizzle:</span><span class="p">)</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
其中jr_swizzleMethod方法是<a target='_blank' href="https://github.com/rentzsch/jrswizzle">jrswizzle</a>提供的方法。
然后在NSArray的Category里加入objectAtIndex_swizzle方法:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">objectAtIndex_swizzle:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">index</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">UIView</span> <span class="nl">jr_swizzleMethod:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">objectAtIndex:</span><span class="p">)</span> <span class="nl">withMethod:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">objectAtIndex_swizzle:</span><span class="p">)</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="kt">id</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">objectAtIndex:</span><span class="n">index</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">UIView</span> <span class="nl">jr_swizzleMethod:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">objectAtIndex:</span><span class="p">)</span> <span class="nl">withMethod:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">objectAtIndex_swizzle:</span><span class="p">)</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
但其实上面的方法不用那么复杂：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">objectAtIndex_swizzle:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">index</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kt">id</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">objectAtIndex_swizzle:</span><span class="n">index</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
看似会造成死循环，其实不会，首先我们调用原始的objectAtIndex方法会执行到此方法，当执行到第3行objectAtIndex_swizzle时，objectAtIndex_swizzle方法的实现跟原始的objectAtIndex方法实现替换了，所以会执行原始的objectAtIndex方法，并不会造成死循环。</p>

<h3>Method Swizzling的缺点</h3>


<p>1、不稳定，实验过程中发现并不是所有的方法都生效，原因没有深究。<br>
2、严重的侵入性，使用不当会破坏原有的逻辑，比如多人开发的前提下，会有人使用try catch来判断当前objectAtIndex是否发生了异常，然后再分别执行不同的逻辑，如果被替换成objectAtIndex_swizzle了的话，调用方永远不会发生异常（因为在objectAtIndex_swizzle内部异常已经被处理了），所以会造成相关逻辑不会被执行。</p>

<h3>最后的方案</h3>


<p>总结上面的问题，最后我采用了简单的Category，实现了objectAtIndex_Safely方法，供开发者选择性的调用，在objectAtIndex_Safely方法里catch了异常之后，将异常信息上传至服务器，方便开发人员随时查询。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone5 UIAlertView导致屏幕闪烁的问题]]></title>
    <link href="http://cantellow.github.com/blog/2013/02/21/iphone5-uialertview-show-cause-the-screen-to-flicker/"/>
    <updated>2013-02-21T11:06:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/02/21/iphone5-uialertview-show-cause-the-screen-to-flicker</id>
    <content type="html"><![CDATA[<p>解决方法：将项目中所有UIAlertView show方法都放在主线程中<!-- more -->
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">alterView</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
我只在iPhone5上发现有这个问题，也有人说这是6.1版本的问题，参见：<a target="_blank" href="http://stackoverflow.com/questions/14743978/uialertview-lags-leaves-dim-effect-then-causes-the-screen-to-flicker-on-ios-6">UIAlertView lags, leaves dim effect, then causes the screen to flicker on iOS 6.1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APP升级遇到的两个问题]]></title>
    <link href="http://cantellow.github.com/blog/2013/02/17/two-traps-encountered/"/>
    <updated>2013-02-17T11:35:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/02/17/two-traps-encountered</id>
    <content type="html"><![CDATA[<h3>NO1,sqlite数据结构不兼容</h3>


<p>现象：新的数据插不进去，功能性错误<!-- more --><br>
解释：之前一直很注意这个问题，但还是忘记了。前一个版本将sqlite建表逻辑更新出去了，当前版本开发中新增了几个列，导致插入数据出错，fmdb lasterror显示没有那几个column。<br>
临时解决方案：如果这个表里没有任何数据，就drop掉，重新create。<br>
最终解决方案：最初建表时多用一个extra column，里面保存json数据，可以兼容多个column扩展，也可以新建扩展表。后续版本最好不要更改表结构，如真的需要，考虑好数据兼容和迁移问题。</p>

<h3>NO2,文件的绝对路径变动</h3>


<p>现象：图片显示不出来<br>
解释：保存图片使用的是绝对路径，这些路径保存在sqlite中，更新之后图片的实际路径变动，通过sqlite中的路径找不到，所以就显示不出来。<br>
临时解决方案：存储路径时使用相对路径，显示图片时兼容上个版本的绝对路径，将其匹配为相对路径，同时更新数据库。<br>
最终解决方案：所有对文件的存储都应该使用相对路径，这是因为app升级的时候，它的class id会变：When you do an update, the new version is installed to a completely different location. The contents of a couple of key folders such as /Documents are copied from the old version to the new version. Then the old version is deleted.</p>

<h3>怎么测试app update</h3>


<p>测试是软件质量的最后一道防护线，所以测试的流程和质量非常重要，上面两个升级的问题就是因为对app update未测试到导致没有被发现，最后我们决定使用OTA来部署app，参考资料：<br>
<a target="_blank" href="https://help.apple.com/iosdeployment-apps/mac/1.1/?lang=en-us#app43ad871e">Installing apps wirelessly</a><br>
<a target="_blank" href="http://www.cnblogs.com/yingkong1987/archive/2012/10/28/2743774.html">IOS通过OTA部署App</a></p>

<p>最后特别注意，每次提交app store时都应该保存一份源代码之后再开发下一版的功能，因为提交可能审核不通过，或者发布出去有严重bug需要紧急更新等等，如果你使用git，建议使用git-flow来指导你的分支模型，<a target="_blank" href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>。
<img src="http://cantellow.github.com/images/posts/5.png" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[循环引用导致的内存泄漏]]></title>
    <link href="http://cantellow.github.com/blog/2013/01/31/circular-references-cause-memory-leaks/"/>
    <updated>2013-01-31T17:46:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/01/31/circular-references-cause-memory-leaks</id>
    <content type="html"><![CDATA[<p>有时候didReceiveMemoryWarning不像女人的大姨妈来的那么确定，让人摸不着头脑，不过好在有Instruments这种神器，帮我们解决了不少问题。<br></p>

<!-- more -->


<p>用Instruments分析了一下刚做好的app，发现如果反复触发同一个页面（没有做缓存），内存居高不下，仔细搜索controller的类名，发现根本就没有释放掉，触发代码如下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">XXXViewController</span> <span class="o">*</span><span class="n">viewController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">XXXViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">viewController</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
释放代码如下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这几行代码没有什么复杂的，为什么pop之后XXXViewController没有释放呢，刚开始以为是NavigationController本身的机制就是这样的，后来新建了工程，写了例子代码之后发现pop之后controller是确定能够释放的。<br>
仔细用Instruments分析了一遍XXXViewController的retain和release历史，但由于经过ARC之后有大约70多条，一个一个的分析不知道能分析到什么时候，最后检查了一遍代码，发现是由于循环引用导致。<br><br>
简单来说就是XXXViewController引用了SubViewController，而在初始化SubViewController的时候把self传给了SubViewController，而且是strong引用，结果就导致XXXViewController pop之后retainCount仍然为1，从而内存泄漏了。<br>
相比较而言，java在循环引用上处理就比较给力，java的GC使用图算法从根对象出发，找到无法达到的对象：<br>
<img src="http://cantellow.github.com/images/posts/2.png" ><br>
而ARC只是编译时期的特性，在合适的地方插入retain和release代码，使用简单的对象引用计算来判断对象是否该释放。<br>
怎么解决循环引用呢？大致有两种方法：<br>
1、手动切断循环引用中的一端，比如在pop view的时候顺便把SubViewController对self的引用切断，置为nil<br>
2、使用weak，弱引用，本例中，在SubViewController中对self的持有置为weak引用，表示不对retainCount加1，ARC遵循这样的原则：“只要某个对象被任一strong指针指向，那么它将不会被销毁。如果对象没有被任何strong指针指向，那么就将被销毁”。<br><br>
大部分情况下，我们用不到weak引用，但它却时刻伴随着我们，一个常见的例子就是oc中常见的delegate设计模式，viewController中有一个strong指针指向它所负责管理的UITableView，而UITableView中的dataSource和delegate指针都是指向viewController的weak指针。<br>
<img src="http://cantellow.github.com/images/posts/3.png" ><br>
本例中引起循环引用的业务逻辑就是子controller要用到父controller的方法，这其实不用我们手工维持这么一个引用，可以使用self.parentViewController来获取，但在这之前你必须在addSubview的时候[self addChildViewController:subViewController]，这是一个好习惯，参见：<a target='_blank' href="http://blog.devtang.com/blog/2012/02/06/new-methods-in-uiviewcontroller-of-ios5/">iOS5中UIViewController的新方法</a></p>

<br>未优化时每触发一次都能泄漏0.5M，十次至少泄漏5M，优化后触发十次的内存：<br>


<p><img src="http://cantellow.github.com/images/posts/4.jpg" ><br>
基本上跟初始内存一模一样，可以断定没有任何泄漏了。</p>
]]></content>
  </entry>
  
</feed>
