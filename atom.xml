<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[cantellow's blog]]></title>
  <link href="http://cantellow.github.com/atom.xml" rel="self"/>
  <link href="http://cantellow.github.com/"/>
  <updated>2013-02-21T11:21:07+08:00</updated>
  <id>http://cantellow.github.com/</id>
  <author>
    <name><![CDATA[cantellow]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iPhone5 [UIAlertView show]导致屏幕闪烁的问题]]></title>
    <link href="http://cantellow.github.com/blog/2013/02/21/iphone5-uialertview-show-cause-the-screen-to-flicker/"/>
    <updated>2013-02-21T11:06:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/02/21/iphone5-uialertview-show-cause-the-screen-to-flicker</id>
    <content type="html"><![CDATA[<p>解决方法：将show方法放在主线程中</p>

<figure class='code'><figcaption><span>1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alterView</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>我只在iPhone5上发现有这个问题，也有人说这是6.1版本的问题，参见：<a target="_blank" href="http://stackoverflow.com/questions/14743978/uialertview-lags-leaves-dim-effect-then-causes-the-screen-to-flicker-on-ios-6">UIAlertView lags, leaves dim effect, then causes the screen to flicker on iOS 6.1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APP升级遇到的两个问题]]></title>
    <link href="http://cantellow.github.com/blog/2013/02/17/two-traps-encountered/"/>
    <updated>2013-02-17T11:35:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/02/17/two-traps-encountered</id>
    <content type="html"><![CDATA[<h3>NO1,sqlite数据结构不兼容</h3>


<p>现象：新的数据插不进去，功能性错误<!-- more --><br>
解释：之前一直很注意这个问题，但还是忘记了。前一个版本将sqlite建表逻辑更新出去了，当前版本开发中新增了几个列，导致插入数据出错，fmdb lasterror显示没有那几个column。<br>
临时解决方案：如果这个表里没有任何数据，就drop掉，重新create。<br>
最终解决方案：最初建表时多用一个extra column，里面保存json数据，可以兼容多个column扩展，也可以新建扩展表。后续版本最好不要更改表结构，如真的需要，考虑好数据兼容和迁移问题。</p>

<h3>NO2,文件的绝对路径变动</h3>


<p>现象：图片显示不出来<br>
解释：保存图片使用的是绝对路径，这些路径保存在sqlite中，更新之后图片的实际路径变动，通过sqlite中的路径找不到，所以就显示不出来。<br>
临时解决方案：存储路径时使用相对路径，显示图片时兼容上个版本的绝对路径，将其匹配为相对路径，同时更新数据库。<br>
最终解决方案：所有对文件的存储都应该使用相对路径，这是因为app升级的时候，它的class id会变：When you do an update, the new version is installed to a completely different location. The contents of a couple of key folders such as /Documents are copied from the old version to the new version. Then the old version is deleted.</p>

<h3>怎么测试app update</h3>


<p>测试是软件质量的最后一道防护线，所以测试的流程和质量非常重要，上面两个升级的问题就是因为对app update未测试到导致没有被发现，最后我们决定使用OTA来部署app，参考资料：<br>
<a target="_blank" href="https://help.apple.com/iosdeployment-apps/mac/1.1/?lang=en-us#app43ad871e">Installing apps wirelessly</a><br>
<a target="_blank" href="http://www.cnblogs.com/yingkong1987/archive/2012/10/28/2743774.html">IOS通过OTA部署App</a></p>

<p>最后特别注意，每次提交app store时都应该保存一份源代码之后再开发下一版的功能，因为提交可能审核不通过，或者发布出去有严重bug需要紧急更新等等，如果你使用git，建议使用git-flow来指导你的分支模型。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012年工作总结]]></title>
    <link href="http://cantellow.github.com/blog/2013/02/17/summary-of-the-work-in-2012/"/>
    <updated>2013-02-17T11:13:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/02/17/summary-of-the-work-in-2012</id>
    <content type="html"><![CDATA[<p>此刻，我正在回家的路上写下对2012年的回顾。<!-- more --></p>

<p>1到5月份，在人人网负责相册产品的日常开发、维护。<br>
6月份，独立策划并开发了一款相册搬家web app，它可以将Qzone/网易相册里的照片一键搬家到人人网。 <br>
7月份，从人人网离职，加入到一家创业公司，相册搬家不了了之。 <br>
8到9月份，使用C++语言开发一款IM程序。 <br>
10到11月份，开发一款网络程序，类似爬虫之类的，结果不尽如意。 <br>
12月份到2013年1月份，开始进入IOS开发，和另一同事开发了两款APP，一款是社交类，一款是照片类。</p>

<p>这一年从人人网离职，加入创业公司工作。 <br>
这一年我接触了C++和object-c两种新语言，已经比较熟悉学习一门新语言的过程，最主要的还是有了第一步，我也更愿意尝试其他语言。 <br>
这一年我感觉到了一个瓶颈，虽然进入了移动互联网领域，但我并没有觉得自己技术上提高了多少，纵观整个一年没有让我觉得拿得出手的亮点，对此，我希望来年有所突破。</p>

<p>新的一年里，我希望能结交更多的朋友，谢谢大家。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[循环引用导致的内存泄漏]]></title>
    <link href="http://cantellow.github.com/blog/2013/01/31/circular-references-cause-memory-leaks/"/>
    <updated>2013-01-31T17:46:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/01/31/circular-references-cause-memory-leaks</id>
    <content type="html"><![CDATA[<p>有时候didReceiveMemoryWarning不像女人的大姨妈来的那么确定，让人摸不着头脑，不过好在有Instruments这种神器，帮我们解决了不少问题。<br></p>

<!-- more -->


<p>用Instruments分析了一下刚做好的app，发现如果反复触发同一个页面（没有做缓存），内存居高不下，仔细搜索controller的类名，发现根本就没有释放掉，触发代码如下：</p>

<figure class='code'><figcaption><span>code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">XXXViewController</span> <span class="o">*</span><span class="n">viewController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">XXXViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">viewController</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>释放代码如下：</p>

<figure class='code'><figcaption><span>code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这几行代码没有什么复杂的，为什么pop之后XXXViewController没有释放呢，刚开始以为是NavigationController本身的机制就是这样的，后来新建了工程，写了例子代码之后发现pop之后controller是确定能够释放的。<br>
仔细用Instruments分析了一遍XXXViewController的retain和release历史，但由于经过ARC之后有大约70多条，一个一个的分析不知道能分析到什么时候，最后检查了一遍代码，发现是由于循环引用导致。<br><br>
简单来说就是XXXViewController引用了SubViewController，而在初始化SubViewController的时候把self传给了SubViewController，而且是strong引用，结果就导致XXXViewController pop之后retainCount仍然为1，从而内存泄漏了。<br>
相比较而言，java在循环引用上处理就比较给力，java的GC使用图算法从根对象出发，找到无法达到的对象：<br>
<img src="http://cantellow.github.com/images/posts/2.png" ><br>
而ARC只是编译时期的特性，在合适的地方插入retain和release代码，使用简单的对象引用计算来判断对象是否该释放。<br>
怎么解决循环引用呢？大致有两种方法：<br>
1、手动切断循环引用中的一端，比如在pop view的时候顺便把SubViewController对self的引用切断，置为nil<br>
2、使用weak，弱引用，本例中，在SubViewController中对self的持有置为weak引用，表示不对retainCount加1，ARC遵循这样的原则：“只要某个对象被任一strong指针指向，那么它将不会被销毁。如果对象没有被任何strong指针指向，那么就将被销毁”。<br><br>
大部分情况下，我们用不到weak引用，但它却时刻伴随着我们，一个常见的例子就是oc中常见的delegate设计模式，viewController中有一个strong指针指向它所负责管理的UITableView，而UITableView中的dataSource和delegate指针都是指向viewController的weak指针。<br>
<img src="http://cantellow.github.com/images/posts/3.png" ><br>
本例中引起循环引用的业务逻辑就是子controller要用到父controller的方法，这其实不用我们手工维持这么一个引用，可以使用self.parentViewController来获取，但在这之前你必须在addSubview的时候[self addChildViewController:subViewController]，这是一个好习惯，参见：<a target='_blank' href="http://blog.devtang.com/blog/2012/02/06/new-methods-in-uiviewcontroller-of-ios5/">iOS5中UIViewController的新方法</a></p>

<br>未优化时每触发一次都能泄漏0.5M，十次至少泄漏5M，优化后触发十次的内存：<br>


<p><img src="http://cantellow.github.com/images/posts/4.jpg" ><br>
基本上跟初始内存一模一样，可以断定没有任何泄漏了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photo全线JVM调优]]></title>
    <link href="http://cantellow.github.com/blog/2013/01/31/the-photo-full-line-jvm-tuning/"/>
    <updated>2013-01-31T17:40:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/01/31/the-photo-full-line-jvm-tuning</id>
    <content type="html"><![CDATA[<p>嗯，octopress让程序员写博客有了装的感觉，不过涉及到图片表格很多的文章还是好复杂呀，所以传到了豆丁：<br></p>

<!-- more -->


<p><embed src='http://www.docin.com/DocinViewer-594500096-144.swf' width='650' height='490' type=application/x-shockwave-flash ALLOWFULLSCREEN='true' ALLOWSCRIPTACCESS='always'></embed></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[photo 2011年末 线上重大经验教训]]></title>
    <link href="http://cantellow.github.com/blog/2013/01/31/album-late-2011-online-significant-lessons-for-renren/"/>
    <updated>2013-01-31T17:07:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/01/31/album-late-2011-online-significant-lessons-for-renren</id>
    <content type="html"><![CDATA[<p>这是一封内部邮件。</p>

<p>新年伊始，去年的3个月相信对各位都是一段非常难忘的岁月，回过头来一想，以前遇到的各种苦难和困难根本不算什么，咬咬牙就过去了，从另一方面说困难和问题对我们是一件宝贵的财富，特别是一些线上重大问题，为此我整理了一些，目的是学习更多的东西避免下次犯同样的错误。<!-- more --></p>

<h3>1、新机器的配置不全</h3>


<p>比如数据库连接的权限，以前旋转在java端的时候还需要安装Jmagick</p>

<h3>2、国庆期间晚上高峰期resin频繁ping超时导致不定时重启</h3>


<p>upload的旋转功能访问静态文件走的是外网，龟速的下载速度导致大量的用户TCP连接得不到释放，进而导致高峰期超过最大连接数限制，resin自带的ping失败，然后重启。
解决问题一般要从问题表现的现象入手，一步一步的找到根本原因。</p>

<h3>3、其他服务超时导致相册服务器内存巨高甚至崩溃</h3>


<p>这种现象发生过至少3次了，ICE超时那次表现最典型，我们的photo内存一直占据着95%左右，有时swap都还吃紧，查看堆信息和gc信息都很正常，毫无疑问是direct memory泄漏，猜测是socket连接开辟的DirectByteBuffer因为其他服务超时得不到释放。</p>

<h3>4、为客户端提供的上传接口改了返回值导致客户端大批上传失败</h3>


<p>原因是由于我们没有认清客户端的产品特性造成的，客户端一旦发布就很难收回，对他们提供的接口也需要考虑兼容各种版本，涉及客户端的接口改动需要谨慎再谨慎。 </p>

<h3>5、其他服务接口调用方法错误，导致内存溢出</h3>


<p>ajax获取评论时错误：java.lang.OutOfMemoryError:unable to create new native thread，根本原因是我们在调用其他服务接口时没有进行任何封装直接调用，而这个接口每次请求时都会新建一个线程且不会消亡，最后导致把内存消耗完毕，没有线程可建从而抛出上述错误。<br>堆内存（Xmx）+ 方法区内存（MaxPermSize）+ 栈内存（Xss,包括虚拟机栈和本地方法栈）*线程数 + NIO direct memory + socket缓存区（receive37KB，send25KB）+ JNI代码 + 虚拟机和GC本身 = java的内存，在物理内存和操作系统内存一定的情况下，创建的线程数目是有限制的。</p>

<h3>6、upload和photo的mem cache model不一致，导致内存巨高甚至崩溃</h3>


<p>Mem cache的model不一样，导致调用java序列化还原对象时抛出异常，与mem机器连接开辟的DirectByteBuffer得不到释放，从而导致内存居高不下。 </p>

<h3>7、排序一个非常隐藏的bug把数据库给搞死了</h3>


<p>在调用dao方法的时候，java会反射调用model的get和set方法，这个bug就是忽略了这一点导致的。</p>

<h3>8、虚拟机参数导致upload更新时启动失败，间接导致3g几个小时内上传照片全部失败</h3>


<p>原因是虚拟机设置的栈太小（128K），导致loadclass线程溢出（这种线程一般“战线”拉的都很长），启动过程中抛出一大堆NoClassNotFound异常，改为-Xss256k就没有问题了。 </p>

<h3>9、spring的BeanFactoryUtils.beanOfTypeIncludingAncestors方法导致CPU巨高</h3>


<p>beanOfTypeIncludingAncestors这个方法消耗太多的内存，导致一次普通的请求消耗上100M内存，频繁的GC导致CPU居高不下 </p>

<h3>总结，我碰到过好几次内存巨高的情况，CPU巨高我只碰到过一次，分别说明一下：</h3>


<p>1、内存巨高，首先看java堆内存回收是否正常、GC信息是否正常、有没有抛出OOM异常，如果没有基本上就可以确定是java NIO direct memory泄漏，造成DM泄漏主要是通过网络调用其他服务造成的，可以查看一下网络连接情况、socket连接数，记得前往不要忘了查看业务后台信息，一般内存很高的话，后台都有一堆超时异常。<br>
2、CPU巨高，在没有开销很大的算法情况下，首先考虑到的是GC信息，看看GC的速度是不是比平时快了很多，锁定几个访问量比较大的URL，找一台测试机，频繁刷新这个url，看看gc情况，最后确定唯一的url，利用java自带的MemoryUsage监控内存情况，进而确定问题根本原因。<br> 
写代码是一件很容易的事情，写好代码就不容易了，写好代码并且让服务跑的很“欢乐”就更不容易了，新的一年，希望我们最大限度“压榨”服务器性能，希望相册服务跑得更加完美。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[早前的一些ppt]]></title>
    <link href="http://cantellow.github.com/blog/2013/01/31/some-ppt/"/>
    <updated>2013-01-31T16:37:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/01/31/some-ppt</id>
    <content type="html"><![CDATA[<p>slideshare被屏蔽了，无力吐槽，只好上传到豆丁，将就一下吧。<br></p>

<!-- more -->


<h3>NO1</h3>


<p>第一个是JVM的分享，当时就职于raisecom，时间是在2011年3月21日，适合新手阅读:<br>
<embed src='http://www.docin.com/DocinViewer-594450747-144.swf' width='650' height='490' type=application/x-shockwave-flash ALLOWFULLSCREEN='true' ALLOWSCRIPTACCESS='always'></embed></p>

<h3>NO2</h3>


<p>第二是代码质量方面的分享，还是在raisecom，时间是2011年5月19日:<br>
<embed src='http://www.docin.com/DocinViewer-594450748-144.swf' width='650' height='490' type=application/x-shockwave-flash ALLOWFULLSCREEN='true' ALLOWSCRIPTACCESS='always'></embed></p>

<h3>NO3</h3>


<p>第三个是重构方面的，时间和地点与第二个一样:<br>
<embed src='http://www.docin.com/DocinViewer-594450749-144.swf' width='650' height='490' type=application/x-shockwave-flash ALLOWFULLSCREEN='true' ALLOWSCRIPTACCESS='always'></embed></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单例模式的七种写法]]></title>
    <link href="http://cantellow.github.com/blog/2013/01/31/singleton-pattern-seven-written/"/>
    <updated>2013-01-31T15:15:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/01/31/singleton-pattern-seven-written</id>
    <content type="html"><![CDATA[<p>转载请注明出处：<a target='_blank' href="http://cantellow.iteye.com/blog/838473">http://cantellow.iteye.com/blog/838473</a></p>

<h3>第一种（懒汉，线程不安全）：</h3>


<!-- more -->




<figure class='code'><figcaption><span>1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span> <span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种写法lazy loading很明显，但是致命的是在多线程不能正常工作。</p>

<h3>第二种（懒汉，线程安全）：</h3>




<figure class='code'><figcaption><span>2  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span> <span class="o">(){}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种写法能够在多线程中很好的工作，而且看起来它也具备很好的lazy loading，但是，遗憾的是，效率很低，99%情况下不需要同步。</p>

<h3>第三种（饿汉）：</h3>




<figure class='code'><figcaption><span>3  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span> <span class="o">(){}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式基于classloder机制避免了多线程的同步问题，不过，instance在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用getInstance方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance显然没有达到lazy loading的效果。</p>

<h3>第四种（饿汉，变种）：</h3>




<figure class='code'><figcaption><span>4  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span> <span class="o">(){}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表面上看起来差别挺大，其实跟第三种方式差不多，都是在类初始化即实例化instance。</p>

<h3>第五种（静态内部类）：</h3>




<figure class='code'><figcaption><span>5  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SingletonHolder</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span> <span class="o">(){}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">SingletonHolder</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式同样利用了classloder的机制来保证初始化instance时只有一个线程，它跟第三种和第四种方式不同的是（很细微的差别）：第三种和第四种方式是只要Singleton类被装载了，那么instance就会被实例化（没有达到lazy loading效果），而这种方式是Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance。想象一下，如果实例化instance很消耗资源，我想让他延迟加载，另外一方面，我不希望在Singleton类加载时就实例化，因为我不能确保Singleton类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化instance显然是不合适的。这个时候，这种方式相比第三和第四种方式就显得很合理。</p>

<h3>第六种（枚举）：</h3>




<figure class='code'><figcaption><span>6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">whateverMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式是Effective Java作者Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒啊，不过，个人认为由于1.5中才加入enum特性，用这种方式写不免让人感觉生疏，在实际工作中，我也很少看见有人这么写过。</p>

<h3>第七种（双重校验锁）：</h3>




<figure class='code'><figcaption><span>7  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span> <span class="o">(){}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getSingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">singleton</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个是第二种方式的升级版，俗称双重检查锁定，详细介绍请查看：<a target='_blank' href="http://www.ibm.com/developerworks/cn/java/j-dcl.html">http://www.ibm.com/developerworks/cn/java/j-dcl.html</a><br>
在JDK1.5之后，双重检查锁定才能够正常达到单例效果。</p>

<h3>总结</h3>


<p>有两个问题需要注意：<br>
1.如果单例由不同的类装载器装入，那便有可能存在多个单例类的实例。假定不是远端存取，例如一些servlet容器对每个servlet使用完全不同的类装载器，这样的话如果有两个servlet访问一个单例类，它们就都会有各自的实例。<br>
2.如果Singleton实现了java.io.Serializable接口，那么这个类的实例就可能被序列化和复原。不管怎样，如果你序列化一个单例类的对象，接下来复原多个那个对象，那你就会有多个单例类的实例。
对第一个问题修复的办法是：</p>

<figure class='code'><figcaption><span>8  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Class</span> <span class="nf">getClass</span><span class="o">(</span><span class="n">String</span> <span class="n">classname</span><span class="o">)</span>
</span><span class='line'>                                         <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ClassLoader</span> <span class="n">classLoader</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">classLoader</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>         <span class="n">classLoader</span> <span class="o">=</span> <span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">(</span><span class="n">classLoader</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="n">classname</span><span class="o">));</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对第二个问题修复的办法是：</p>

<figure class='code'><figcaption><span>9  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">protected</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">Object</span> <span class="nf">readResolve</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对我来说，我比较喜欢第三种和第五种方式，简单易懂，而且在JVM层实现了线程安全（如果不是多个类加载器环境），一般的情况下，我会使用第三种方式，只有在要明确实现lazy loading效果时才会使用第五种方式，另外，如果涉及到反序列化创建对象时我会试着使用枚举的方式来实现单例，不过，我一直会保证我的程序是线程安全的，而且我永远不会使用第一种和第二种方式，如果有其他特殊的需求，我可能会使用第七种方式，毕竟，JDK1.5已经没有双重检查锁定的问题了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hi octopress]]></title>
    <link href="http://cantellow.github.com/blog/2013/01/30/hi-octopress/"/>
    <updated>2013-01-30T21:58:00+08:00</updated>
    <id>http://cantellow.github.com/blog/2013/01/30/hi-octopress</id>
    <content type="html"><![CDATA[<p>我的上一个博客<a target='_blank' href="http://cantellow.iteye.com">ITEYE</a>其实已经荒废了很久了，最近有想法重拾：<br>
1、觉得<a target='_blank' href="http://octopress.org/">octopress</a>的风格非常好看，还有配合<a target='_blank' href="https://github.com/">github</a>搭建省下了VPS的钱<br>
2、做技术的需要沉淀，需要积累，需要厚积而薄发，blog的方式能让你的知识融会贯通，要将脑海里的知识文本化，需要更多的代价和勇气，当然最后收获的也就更多。</p>

<!-- more -->


<p>嗯，ITEYE上的文章比较多，我会转移部分文章到此blog，最后感谢<a target='_blank' href="http://octopress.org/">octopress</a>，感谢<a target='_blank' href="https://github.com/">github</a>，感谢open source。</p>

<p>===============================================================<br>
在配置分享和评论的时候，发现jiathis的格式混乱：<br>
<img src="http://cantellow.github.com/images/posts/1.jpg"></img><br>
给客户反馈，下面代码可以解决此问题：<br></p>

<figure class='code'><figcaption><span>Javascript Code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="nx">dosomething</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">dosomething</span><span class="p">(){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s1">&#39;complete&#39;</span><span class="p">){</span>
</span><span class='line'>                        <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">div</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                                <span class="k">if</span><span class="p">(</span><span class="nx">div</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">className</span> <span class="o">==</span> <span class="s1">&#39;flash-video&#39;</span><span class="p">){</span>
</span><span class='line'>                                        <span class="nx">div</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;none&#39;</span><span class="p">;</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
